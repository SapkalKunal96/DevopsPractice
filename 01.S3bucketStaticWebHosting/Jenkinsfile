pipeline {
    agent any

    parameters {
        choice(name: 'CHOICES', choices: ['apply', 'destroy'], description: 'Depends on input pipeline will trigger')
        string(name: 'S3_Bucket', defaultValue: 'www.cloudenthusiastic.online', description: 'Please enter your website name. e.g. www.cloudenthusiastic.online')
    }

    environment {
        AWS_REGION = 'us-east-1'
    }
    stages {

        stage('Terraform Init') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'jenkins-aws-key-id']]) {
                    script {
                        sh """
                            terraform --version
                            cd /var/lib/jenkins/workspace/01.S3Bucket/01.S3bucketStaticWebHosting/terraform
                            terraform init
                        """
                    }
                }
            }
        }

        stage('Terraform Apply') {
            when {
                expression { return params.CHOICES == 'apply' }
            }
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'jenkins-aws-key-id']]) {
                    script {
                        sh """
                            cd 01.S3bucketStaticWebHosting/terraform
                            terraform apply --auto-approve
                        """
                    }
                }
            }
        }

        stage('Terraform Destroy') {
            when {
                expression { return params.CHOICES == 'destroy' }
            }
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'jenkins-aws-key-id']]) {
                    script {
                        sh """
                            cd 01.S3bucketStaticWebHosting/terraform
                            terraform destroy --auto-approve
                        """
                    }
                }
            }
        }

        stage('Pushing code to S3') {
            steps {
                // Set AWS credentials using Jenkins' AWS Credentials plugin
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'jenkins-aws-key-id']]) {
                    script {
                        try {
                            sh """
                                aws s3 ls
                                cd ../01.S3bucketStaticWebHosting/website
                                aws s3 sync . s3://${params.S3_Bucket}/ 
                            """
                        } catch (Exception e) {
                            error "AWS S3 sync failed: ${e.getMessage()}"
                        }
                    }
                }
            }
        }

        stage('Test Website') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'jenkins-aws-key-id']]) {
                    sh 'curl http://${params.S3_Bucket}.s3-website-${env.AWS_REGION}.amazonaws.com'
                    // Add your deployment steps here
                }
            }
        }

    }
}
